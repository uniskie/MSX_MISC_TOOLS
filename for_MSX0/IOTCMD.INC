;-*- tab-width: 8 -*-
;================================================================
;	MSX0 Iot ROM
;		ver 0.05.04
;
; デバイス拡張：使用しない方が良い
;	 OPEN"iot:" #n:PRINT#n:INPUT#n は未完成。フリーズもあり
;
; ステートメント拡張：
;	 ※ Vは数値変数か文字変数
;	 ※ Nは数値変数
;	CALL IOTINIT()
;	CALL IOTPUT("NodeNname",V)
;	CALL IOTGET("NodeNname",V)
;	CALL IOTFIND("NodeNname",N)
;	CALL IOTFIND("NodeNname",V(0),COUNT)
;	
;	機能不明：CALL IOTSEND("","")
;		他の命令とプロトコルが異なる
;
;================================================================
;I/Oポート
;	8 	IOT操作（入出力）
;	16	ターミナルコンソールへの出力（出力）
;================================================================
;ノードアクセスの流れ
;	(1) コマンド出力（ノード指定）
;	(2) ノード名出力
;	(3) 1byte I/O読み込み→bit7が1なら存在しない
;	(4) コマンド出力 (put/get/find)
;	(5) データ出力 or データ取得
;================================================================
;基本の流れ
;	(1) コマンド出力
;	(2) データ出力 or データ取得

;################################################################
;(1) コマンド #e0, #01, コマンド+型ID
;   ※ #E0 = コマンド指定
;   ※ #01 = コマンドデータサイズ
;################################################################
;   ノード指定	#e0,#01,#53
;		※ #53 ... コマンド #50
;		           型指定は文字列(3)で固定
;		※ ノード指定後にポートを1回読み込み、
;		   bit7が立っていればエラー
;----------------------------------------------------------------
;   iotput	#e0,#01,#40 + 型ID
;----------------------------------------------------------------
;   iotget	#e0,#01#,#00 + 型ID
;----------------------------------------------------------------
;   iotfind	#e0,#01,#10 + 型ID
;----------------------------------------------------------------

;================================================================
;   型ID
;================================================================
;		1=2バイト整数型
; 		2=単精度実数型
; 		3=文字列
; 		4=倍精度実数型

;################################################################
;(2) データ
;################################################################
;================================================================
;(2)-A データ出力 #c0, データ長n, データ*n, #00
;================================================================
;	※ データ長が64を超える場合は分割が必要
;	WHILE (データ長 > 64)
;	    #7Fを出力
;	    データを64byte出力
;	    データ長 -= 64
;	    データの位置 += 64
;	LOOP
;	IF (データ長 > 0)
;	    データ長を出力
;	    データを全部出力
;	ENDIF
;----------------------------------------------------------------
;   2バイト整数出力:
;	#c0, #02, 数値下位1byte, 数値上位1byte, #00
;----------------------------------------------------------------
;   文字列出力:
;	#c0, [データ長, 文字列], #00
;----------------------------------------------------------------
;================================================================
;(2)-B データ取得 (out)#80, (in)データ長n, データ*n
;================================================================
;----------------------------------------------------------------
;   数値取得:
;----------------------------------------------------------------
;	(out) #80, (in)データ長, (in)Low 1byte, (in) High 1byte
;----------------------------------------------------------------
;   文字列取得
;----------------------------------------------------------------
;	(out) #80, (in)データ長, (in)文字列データ*データ長分繰り返し

;================================================================
; 値定義
;================================================================
; I/O port
iot_io:		equ	#08	;I/O port IOT制御
terminal_io:	equ	#10	;I/O port ターミナルコンソールへ出力

; (VALTYP)の値 = BASIC変数記述子のサイズ
valtyp_int:	equ	#02	;2=2バイト整数型
valtyp_str:	equ	#03	;3=文字列型
valtyp_sng:	equ	#04	;4=単精度実数型
valtyp_dbl:	equ	#08	;8=倍精度実数型

; IOTコマンドの変数型
;	iodtyp = (VALTYP)==3 ? (VALTYP) : (VALTYP) >> 1;
iodtyp_int	equ	#01	;1=2バイト整数型
iodtyp_sng	equ	#02	;2=単精度実数型	* 現在未対応
iodtyp_str	equ	#03	;3=文字列
iodtyp_dbl	equ	#04	;4=倍精度実数型	* 現在未対応

; コマンド出力
;	#e0, コマンドデータサイズ,コマンド本体(IOTコマンドビット|IOT変数型)
iod_cmd_start:	equ	#e0	;コマンド設定のはじめ
iod_cmd_node:	equ	#50	;node name
iod_cmd_put:	equ	#40	;iotput
iod_cmd_get:	equ	#00	;iotget
iod_cmd_find:	equ	#10	;iotfind

; データ出力
;	#c0, データサイズ,データ本体,#00
iod_data_start:	equ	#c0	;データ出力のはじめ
iod_data_end:	equ	#00	;データ出力のおわり

; データ取得
;	#80, データサイズ,データ本体
;	整数要求時、データサイズは読み捨てしている様子
iod_data_req:	equ	#80	;データ取得リクエスト

