;================================
; INCLUDE FILE for LOADSRD
;================================
;USR():
; SPR_SET - write SPRITE for 16x16
; SPC_SET - set SPRITE PAT COLOR TABLE for 16x16
;================================
;---- WRITE SPRITE from 16BIT(INT) ARRAY ----
;SPR_ATU {
; s16_t Y;
; s16_t X;
; s16_t PATTERN_NO;
; s16_t FLAG;
;} spr_attribute_list[32];
SFG_AWAIT: EQU 0FH ;FLAG bit 3 -0  : auto anim wait (0-15)
SFG_ATYPE: EQU 10H ;FLAG bit 4     : 0=2pattern / 1=4pattern ANIM
SFG_ACNTR: EQU 0FH ;FLAG bit 11-8  : wait counter (0-15)
SFG_APAT: EQU 30H ;FLAG bit 13-12 : pat offset (0-3)
SFG_PBIT: EQU 10H ;                 lowest bit of pat offset
SFG_SKIP: EQU 80H ;FLAG bit 15    : SKIP(ERASE)
;SPR_COL {
; u8 COLOR; // EC(1).CC(1).IC(1).0(1).COLOR(4)
;} spr_color_list[64]
;
;VDPIOR: EQU 0006H ;VDP I/O port m (READ)
;VDPIOW: EQU 0007H ;VDP I/O port n (WRITE)
;ATRBAS:  EQU 0F928H
;
CCLSIZE: EQU 400H ;(16*64) for 16x16 SPRITE
;CCLSIZE: EQU 800H ;(8*256) for 8x8 SPRITE
;
;--- CONSTANTS ---
;
SPRU_OY: EQU 0 ; SPRITE ATTRIBUTE USR ARRAY offset : Y
SPRU_OX: EQU 2 ; SPRITE ATTRIBUTE USR ARRAY offset : X
SPRU_OP: EQU 4 ; SPRITE ATTRIBUTE USR ARRAY offset : PAT
SPRU_OF: EQU 6 ; SPRITE ATTRIBUTE USR ARRAY offset : FLAG
;
SPRW_OY: EQU 0 ; SPRITE ATTRIBUTE WORK offset : Y
SPRW_OX: EQU 1 ; SPRITE ATTRIBUTE WORK offset : X
SPRW_OP: EQU 2 ; SPRITE ATTRIBUTE WORK offset : PAT
SPRW_OF: EQU 3 ; SPRITE ATTRIBUTE WORK offset : FLAG
;
BIT_ND: EQU 10H ; NO DISPLAY
BIT_EC: EQU 80H ; EC bit (LEFT SHIFT 32 dot)
;SPW_SKIP: EQU 0FFH ; SKIP WRITE
;
SPRATS: EQU 080H ; SPRITE ATTRIBUTE TABLE BUFFER SIZE 4*32
SPRCLS: EQU 200H ; SPRITE COLOR TABLE SIZE 16*32
SPRMAX: EQU 32 ; SPRITE ENTRY COUNT
SPCOFS: EQU 512 ; (ATRBAS)-SPCOFS = SPRITE COLOR TABLE
;
;--- SET SPRITE COLOR DATA ---
; U=USR(ADR)
; ADR = SPRITE COLOR / 16*64 bytes(for 16X16)
SPC_SET: ;
 CALL GETINT ;HL=USR(XXXX)
 RET NZ
;
; LD (CCLTBL),HL
 LD DE,CCLTBL
 LD BC,CCLSIZE
 LDIR
 RET
;
;--- SET SPRITE ATTRIBUTE ----
SPR_SET: ;
 CALL GETINT ;HL=USR(XXXX)
 RET NZ
;
 PUSH HL
 POP IX
;
 LD B,32
;
;==> anti FLICKER
 LD A,(SPTOFS) ; anti FLICKER
 ADD A,10
 AND SPRMAX-1 ; MASK
 LD (SPTOFS),A
 LD L,A
 LD H,0
 ADD HL,HL
 ADD HL,HL ; offset*4
 LD DE,SPRATB
 ADD HL,DE
; LD (SPTCUR),HL ; offsted SPRATB
 PUSH HL
 POP IY
;
 JR SPRST0
;<== anti FLICKER
; LD IY,SPRATB
;<== NOT anti FLICKER
;
SPRSETL: ;
;==> anti FLICKER
 LD A,B
 AND 1
 JR NZ,SPRST0 ; ODD for SPRITE COMBO
 PUSH IY
 POP HL
 LD DE,SPRATB-16 ; BASE ADDRESS - 4*4
 OR A
 SBC HL,DE ; HL=OFFSET + 4*4 (INCLEASE 1+1+4=6)
 LD DE,SPRATS-1 ;MASK
 LD A,L
 AND E
 LD L,A
 LD A,H
 AND D
 LD H,A
 LD DE,SPRATB ; BASE ADDRESS
 ADD HL,DE ; HL=ADDRESS
 PUSH HL
 POP IY
SPRST0: ;
;<== anti FLICKER
;
;--SKIP FLAG
 LD D,(IX+SPRU_OF+1)
 BIT 7,D ;FLAG bit15 (SFG_SKIP)
 JR Z,SPRST_S
; LD (IY+SPRW_OF),SPW_SKIP ;SKIP FLAG
; JP SPRSTNX
 LD A,BIT_ND ;bit4=NoDisp
 JR SPRSTY2
SPRST_S: ;
;--ANIM FLAG
 LD E,(IX+SPRU_OF)
 LD A,E
 AND SFG_AWAIT ;FLAG bit 3 -0  : auto anim wait (0-15)
 JR Z,SPRSTY1
 LD E,A
 LD A,D
 INC A
 AND SFG_ACNTR ;FLAG bit 11-8  : wait counter (0-15)
 LD D,A
 CP E
 JR C,SPRANIN ; COUNT < WAIT ?
; add pattern ofs
 LD A,(IX+SPRU_OF)
 AND SFG_ATYPE ;FLAG bit 4     : 0=2pattern / 1=4pattern ANIM
 RLCA
 OR SFG_ATYPE ;pat mask : 30H or 10H
 LD E,A
 LD A,(IX+SPRU_OF+1)
 ADD A,SFG_PBIT
 AND E ;FLAG bit 13-12 : pat offset (0-3)
 LD (IX+SPRU_OF+1),A
 LD D,0 ; reset count
SPRANIN: ;
 LD A,(IX+SPRU_OF+1)
 AND 0F0H
 OR D
 LD (IX+SPRU_OF+1),A
;--SPR Y
SPRSTY1: ;
 LD E,(IX+SPRU_OY) ;DE=Y
 LD D,(IX+SPRU_OY+1)
;
; SRA D ;Y/4
; RR E
; SRA D
; RR E
;
 LD A,BIT_ND ;bit4=NoDisp
 LD HL,31
 OR A
 ADC HL,DE ;ADD HL,rr not use Sign flag
 JP M,SPRSTY2 ;Smaller than -31? = NoDisp
 PUSH DE
 LD DE,212+31
 OR A
 SBC HL,DE
 POP DE
 JR NC,SPRSTY2 ;Laeger than 211 = NoDisp
;
 LD A,(ERASEY) ;Y=216 : erase after sprite
 CP E
 LD A,0 ;Disp
 JR NZ,SPRSTY2
 DEC E ;avoid Y=216
SPRSTY2: ;
 LD (IY+SPRW_OF),A ;save NoDisp(bit4)
 LD (IY+SPRW_OY),E ;save Y
;
;--SPR X
 LD E,(IX+SPRU_OX) ;DE=X
 LD D,(IX+SPRU_OX+1)
;
; SRA D ;X/4
; RR E
; SRA D
; RR E
;
 LD A,BIT_ND ;bit4=NoDisp
 LD HL,31
 OR A
 ADC HL,DE ;ADD HL,rr not use Sign flag
 JP M,SPRSTX2 ;Smaller than -31? = NoDisp
 PUSH DE
 LD DE,256+31
 OR A
 SBC HL,DE
 POP DE
 JR NC,SPRSTX2 ;Laeger than 255? = NoDisp
;
 XOR A ;Disp,no EC
 RLC D
 JR NC,SPRSTX2 ;PLUS?
 LD A,E
 ADD A,32 ;SHIFT 32dot
 LD E,A
 LD A,BIT_EC ;EC(bit7)
SPRSTX2: ;
 LD (IY+SPRW_OX),E ;save X
;-- Process NoDisp bit
 OR (IY+SPRW_OF)
 LD (IY+SPRW_OF),A ;save EC(bit7),NoDisp(bit4)
 AND BIT_ND ; No Disp?
 JR Z,SPRSTP1 ; Disp
 LD A,(NDISPY)
 LD (IY+SPRW_OY),A ; Y=NoDisp
SPRSTP1: ;
;-- Pattern No.
 LD E,(IX+SPRU_OP)
 LD A,(IX+SPRU_OF+1)
 AND SFG_APAT ;FLAG bit 13-12 : pat offset (0-3)
 JR Z,SPRSTP2
 RRCA
 RRCA
 RRCA ; 30H -> 06H = 2*n
 ADD A,E
 LD E,A ; pat += 2 * pat_ofs
SPRSTP2: ;
 SLA E ;n*4 (for 16x16)
 SLA E
 LD (IY+SPRW_OP),E ; PAT No.
;-- Loop param
SPRSTNX: ;
 LD DE,4
 ADD IY,DE ;IY+=4
 ADD IX,DE
 ADD IX,DE ;IX+=8
 DEC B
 JP NZ,SPRSETL ;over range: DJNZ SPRSETL
;
;==> use SKIP
;--- WRITE TO VRAM (SPRITE PATTERN TABLE)
; CALL WAITCMD ;VDPºÏÝÄÞ ¼­³Ø®³ÏÁ
;; CALL WAIT_VR ;wait v-sync
;;
;; DI
;;
; LD DE,(ATRBAS) ;sprite atr.
; CALL VSETWRT
; DEC C
; LD HL,SPRATB
; LD B,SPRMAX ;32
; LD DE,SPRATB+SPRW_OF
;--ATR LOOP
;SPROTLP: ;
; LD A,(DE)
; INC DE
; INC DE
; INC DE
; INC DE
; CP SPW_SKIP
; JR NZ,SPROT1
;;--SKIP
; INC HL
; INC HL
; INC HL
; INC HL
; IN A,(C) ;SKIP
; IN A,(C) ;SKIP
; IN A,(C) ;SKIP
; IN A,(C) ;SKIP
; JR SPROT2
;SPROT1: ;
;;--WRITE
; OUTI
; INC B
; OUTI
; INC B
; OUTI
; INC B
; OUTI
; INC B
;SPROT2: ;
; DJNZ SPROTLP
;<== use SKIP
;
;==> use OTIR
;--- WRITE TO VRAM (SPRITE PATTERN TABLE)
 CALL WAITCMD ;VDPºÏÝÄÞ ¼­³Ø®³ÏÁ
 CALL WAIT_VR ;wait v-sync
;
; DI
;<== use OTIR
;
;--- SPRITE COLOR
;
 LD HL,(ATRBAS) ;sprite atr.
 LD DE,-512
 ADD HL,DE
 EX DE,HL ;DE = SPRATR-512 = SPRCOL
 CALL VSETWRT
 DEC C
;
 EXX ; C'=VRAM I/O PORT
 LD B,32
 LD HL,SPRATB
;--COL LOOP
SPCLLP: ;
;--GET FLAG & PAT No.
 INC HL
 INC HL
 LD D,(HL) ; D=PAT No.
 INC HL
 LD E,(HL) ; E=FLAG
 INC HL
 LD A,E
 AND BIT_ND
 JR NZ,SPCLSK ;SKIP
;
;--CALC COLOR SOURCE ADDRESS
 LD A,E ; A=FLAG
 EX AF,AF' ; A'=FLAG
 LD A,D ; A=PAT No.
 EXX ; HL'=ATR ADDRESS / C=VRAM I/O PORT / B'=MAIN COUNTER
 LD E,A
 LD D,0
 SLA E
 RL D
 SLA E
 RL D ; DE=PAT*16/4
; SLA E
; RL D ; DE=PAT*16/2
; SLA E
; RL D ; DE=PAT*16
 LD HL,CCLTBL
 ADD HL,DE ;PATTERN COLOR ADDRESS
 EX AF,AF' ; A=FLAG / A'=PAT No.
 AND BIT_EC ; A=EC bit
 LD D,A ; D=EC bit
;--WRITE TO VRAM (SPRITE COLOR TABLE)
 LD B,16
SPCLL2: ;
 LD A,(HL)
 INC HL
; AND 15 ; TEST
 OR D ; A=COLOR OR EC
 OUT (C),A
 DJNZ SPCLL2
 EXX ; HL=ATR ADDRESS / C'=VRAM I/O PORT / B=MAIN COUNTER
 DJNZ SPCLLP
 JR SPCLE
SPCLSK: ;
;--SKIP VRAM
 EXX ; HL'=ATR ADDRESS / C=VRAM I/O PORT / B'=MAIN COUNTER
 LD B,16
 XOR A
SPCLL3: ;
 OUT (C),A
 DJNZ SPCLL3
 EXX ; HL=ATR ADDRESS / C'=VRAM I/O PORT / B=MAIN COUNTER
 DJNZ SPCLLP
;--END
SPCLE: ;
;==> use OTIR
;--- WRITE TO VRAM (SPRITE PATTERN TABLE)
;
 LD DE,(ATRBAS) ;sprite atr.
 CALL VSETWRT
 DEC C
 LD HL,SPRATB
 LD B,SPRATS ;4*32
 OTIR
;<== use OTIR
 EI
 RET
;
;--- WORK AREA ---
NDISPY: DB 224 ; NO DISPLAY Y
ERASEY: DB 216 ; ERASE AFTER SPR(216=mode2/208=mode1)
SPTOFS: DW 0 ; OFFSET for BLINK
;
SPRATB: DS SPRATS ; SPRITE ATTRIBUTE WORK BUFFER 4*32
; : FLAG,X,Y,PAT
CCLTBL: ;DW 0 ; COLOR for each 16x16 PATTERN (16*64) ADDRESS
 DS CCLSIZE ; COLOR for each 16x16 PATTERN (16*64) BUFFER
;
;-- for TRANSEFR to VRAM --
;SPRATR: DS SPRATS ; SPRITE ATTRIBUTE TABLE for VRAM (4*32)
;SPRCOL: DS SPRCLS ; SPRITE COLOR TABLE for VRAM (16*32)
;
